{"version":3,"sources":["utils/auth.js","utils/mutations.js","utils/localStorage.js","pages/SearchBooks.js","utils/search.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","localStorage","removeItem","getItem","idToken","setItem","window","location","assign","ADD_USER","gql","LOGIN_USER","SAVE_BOOK","DELETE_BOOK","removeBookId","bookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","SearchBooks","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useMutation","saveBook","error","useEffect","bookIdArr","length","handleFormSubmit","event","preventDefault","fetch","response","ok","Error","json","items","bookData","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","console","handleSaveBook","bookToSave","find","Auth","loggedIn","variables","input","username","getProfile","data","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","QUERY_USER","SavedBooks","userData","setUserData","deleteBook","useQuery","loading","user","me","handleDeleteBook","log","updatedUser","reload","_id","savedBooks","author","SignupForm","email","password","formState","setFormState","validated","showAlert","setShowAlert","addUser","handleInputChange","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","props","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","Collapse","Nav","logout","Modal","onHide","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","client","ApolloClient","uri","cache","InMemoryCache","App","ApolloProvider","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce910c05.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return token && !this.isTokenExpired(token) ? true : false;\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    // Decode the token to get its expiration time that was set by the server\n    const decoded = decode(token);\n    // If the expiration time is less than the current time (in seconds), the token is expired and we return `true`\n    if (decoded.exp < Date.now() / 1000) {\n      localStorage.removeItem('id_token');\n      return true;\n    }\n    // If token hasn't passed its expiration time, return `false`\n    return false;\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import { gql } from '@apollo/client';\r\n\r\nexport const ADD_USER = gql`\r\n    mutation addUser($username: String!, $email: String!, $password: String!) {\r\n        addUser(username: $username, email: $email, password: $password) {\r\n            token\r\n            user {\r\n                _id\r\n                username\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const LOGIN_USER = gql`\r\n    mutation login($email: String!, $password: String!) {\r\n        login(email: $email, password: $password) {\r\n            token\r\n            user {\r\n                _id\r\n                username\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SAVE_BOOK = gql`\r\n    mutation saveBook($input: AddBookInput!, $username: String!) {\r\n        saveBook(input: $input, username: $username) {\r\n            _id\r\n            username\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_BOOK = gql`\r\n    mutation deleteBook($bookId: String!, $username: String!) {\r\n        deleteBook(bookId: $bookId, username: $username) {\r\n            _id\r\n            username\r\n        }\r\n    }\r\n`;","export const getSavedBookIds = () => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : [];\n\n  return savedBookIds;\n};\n\nexport const saveBookIds = (bookIdArr) => {\n  if (bookIdArr.length) {\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\n  } else {\n    localStorage.removeItem('saved_books');\n  }\n};\n\nexport const removeBookId = (bookId) => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : null;\n\n  if (!savedBookIds) {\n    return false;\n  }\n\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\n\n  return true;\n};\n","import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\nimport Auth from '../utils/auth';\n// import { useSaveBook } from '../utils/hooks';\nimport { useMutation } from '@apollo/client';\nimport { SAVE_BOOK } from '../utils/mutations';\nimport { searchGoogleBooks } from '../utils/search';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n  // create state to hold saveBook\n  const [ saveBook, { error } ] = useMutation(SAVE_BOOK);\n\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n    // const [ saveBook, { error } ] = useMutation(SAVE_BOOK);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      await saveBook({\n        variables: { input: bookToSave, username: Auth.getProfile().data.username },\n      });\n      if (error) {\n        throw new Error(`something went wrong!`);\n      }\n\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a book'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? (\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\n                      className='btn-block btn-info'\n                      onClick={() => handleSaveBook(book.bookId)}>\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\n                        ? 'This book has already been saved!'\n                        : 'Save this Book!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","// make a search to google books api\r\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\r\nexport const searchGoogleBooks = (query) => {\r\n    return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\r\n};","import { gql } from '@apollo/client';\r\n\r\nexport const QUERY_USER = gql`\r\n    query user( $username: String! ) {\r\n        user( username: $username ) {\r\n            _id\r\n            username\r\n            email\r\n            savedBooks {\r\n                authors\r\n                description\r\n                bookId\r\n                image\r\n                link\r\n                title\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const QUERY_ME = gql`\r\n    query me {\r\n        me {\r\n        _id\r\n        username\r\n        email\r\n        thoughts {\r\n            _id\r\n            thoughtText\r\n            thoughtAuthor\r\n            createdAt\r\n        }\r\n        }\r\n    }\r\n`;\r\n","import React, { useEffect, useState } from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport { Navigate, useParams } from 'react-router-dom';\n\nimport { useQuery, useMutation } from '@apollo/client';\nimport { DELETE_BOOK } from '../utils/mutations';\nimport Auth from '../utils/auth';\nimport { QUERY_USER, QUERY_ME } from '../utils/queries';\nimport { removeBookId } from '../utils/localStorage';\n\nconst SavedBooks = () => {\n  const [userData, setUserData] = useState({});\n  const [deleteBook, { error }] = useMutation(DELETE_BOOK);\n\n  // use this to determine if `useEffect()` hook needs to run again\n  // const userDataLength = Object.keys(userData).length;\n  // const { userParam } = useParams();\n\n  const { loading, data } = useQuery(QUERY_USER, {\n    variables: { username: Auth.getProfile().data.username },\n  });  \n  \n  useEffect(() => {\n    const user = data?.me || data?.user || {};\n      setUserData(user);\n    }, [loading])\n    \n    // handler for deleting a book\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n    if (!token) {\n      console.log('No Token!');\n      return false;\n    }\n\n    try {\n      const updatedUser = await deleteBook({\n        variables: { bookId: bookId, username: Auth.getProfile().data.username },\n      });\n      console.log(updatedUser);\n      setUserData({});\n      setUserData(updatedUser);\n      // upon success, remove book's id from localStorage\n      removeBookId(bookId);\n      window.location.reload();\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  if (!userData?._id) {\n    return <div><h1>Loading..........</h1></div>;\n  }\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length > 0\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>\n                    Authors: {book.authors.map((author) => {return (` ${author},`)})}\n                  </p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\n\nconst SignupForm = () => {\n  const [formState, setFormState] = useState({\n    name: '',\n    email: '',\n    password: '',\n  });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n  const [addUser, { error, data }] = useMutation(ADD_USER);\n  if (error) {\n    console.error(error)\n  }\n  // update state based on form input changes\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  // submit form\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(formState);\n\n    try {\n      const { data } = await addUser({\n        variables: { ...formState },\n      });\n\n      Auth.login(data.addUser.token);\n    } catch (e) {\n      console.error(e);\n      setShowAlert(true);\n    }\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={formState.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={formState.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={formState.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(formState.username && formState.email && formState.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\nimport { LOGIN_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst LoginForm = (props) => {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [showAlert, setShowAlert] = useState(false);\n  const [validated] = useState(false);\n  const [login, { error, data }] = useMutation(LOGIN_USER);\n\n  // update state based on form input changes\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  // submit form\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(formState);\n    try {\n      const { data } = await login({\n        variables: { ...formState },\n      });\n      console.log(data);\n\n      Auth.login(data.login.token);\n    } catch (e) {\n      console.error(e);\n      console.log('big fat error');\n      setShowAlert(true);\n    }\n\n    // clear form values\n    setFormState({\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={formState.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={formState.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(formState.email && formState.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg='dark' variant='dark' expand='lg'>\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n            Google Books Search\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto'>\n              <Nav.Link as={Link} to='/'>\n                Search For Books\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to='/saved'>\n                    See Your Books\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\nimport SearchBooks from './pages/SearchBooks';\nimport SavedBooks from './pages/SavedBooks';\nimport Navbar from './components/Navbar';\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <>\n          <Navbar />\n          <Routes>\n            <Route \n              path='/' \n              element={<SearchBooks />} \n            />\n            <Route \n              path='/saved' \n              element={<SavedBooks />} \n            />\n            <Route \n              path='*'\n              element={<h1 className='display-2'>Wrong page!</h1>}\n            />\n          </Routes>\n        </>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}